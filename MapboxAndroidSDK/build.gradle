buildscript {
    repositories {
        mavenCentral()
        google()
        jcenter()
        maven { url 'https://maven.google.com' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.2'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.10.1'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'checkstyle'
apply plugin: 'digital.wup.android-maven-publish'
apply plugin: 'signing'


allprojects {
    group project.GROUP
    version project.VERSION_NAME

    repositories {
        mavenCentral()
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.android.support:support-v4:22.2.0'
    implementation 'com.squareup.okhttp:okhttp:2.4.0'
    implementation 'com.squareup.okhttp:okhttp-urlconnection:2.4.0'
    implementation 'com.jakewharton:disklrucache:2.0.2'
}

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
    defaultConfig {
        minSdkVersion Integer.parseInt(project.ANDROID_MIN_SDK)
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
    }

    buildTypes {
        all {
            resValue "string", "mapboxAndroidSDKVersion", project.VERSION_NAME
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {

        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'

            java.srcDirs = ['src/main/java']

            res.srcDirs = ['src/main/res']

            assets {
                srcDir 'assets'
            }
        }
    }
}

checkstyle {
    configFile project.file('../checks.xml')
    showViolations true
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    def checkstyle = project.tasks.create "checkstyle${name.capitalize()}", Checkstyle
    checkstyle.dependsOn variant.javaCompile
    checkstyle.source variant.javaCompile.source
    checkstyle.classpath = project.fileTree(variant.javaCompile.destinationDir)
    checkstyle.exclude('**/BuildConfig.java')
    checkstyle.exclude('**/R.java')
    checkstyle.exclude('**/uk/co/senab/bitmapcache/*')
    checkstyle.exclude('**/com/cocoahero/android/geojson/**')
    project.tasks.getByName("check").dependsOn checkstyle
}

// From https://raw.github.com/mcxiaoke/gradle-mvn-push/master/jar.gradle
android.libraryVariants.all { variant ->
    def jarTask = project.tasks.create(name: "jar${variant.name.capitalize()}", type: Jar) {
        from variant.javaCompile.destinationDir
        exclude "**/R.class"
        exclude "**/BuildConfig.class"
    }
    jarTask.dependsOn variant.javaCompile
    artifacts.add('archives', jarTask);
}

// From https://raw.github.com/mcxiaoke/gradle-mvn-push/master/gradle-mvn-push.gradle
def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

task apklib(type: Zip) {
    appendix = extension = 'apklib'

    from 'AndroidManifest.xml'
    into('res') {
        from 'res'
    }
    into('src') {
        from 'src'
    }
}

artifacts {
    archives apklib
}

publishing {
    repositories {
        maven {
            if (isReleaseBuild()) {
                url "s3://osmaps-android/repositories/releases"
            } else {
                url "s3://osmaps-android/repositories/snapshots"
            }
            credentials(AwsCredentials) {
                accessKey "${awsAccessKey}"
                secretKey "${awsSecretKey}"
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            version = project.VERSION_NAME
            artifactId = "mapbox-android-sdk"
            groupId = project.GROUP

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'Mapbox Android raster SDK')
                root.appendNode('description', 'OS Fork of Mapbox Android raster SDK')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')
            }

            from components.android
        }
    }
}
